name: Build and Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        load: true
        tags: my-proof:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # - name: Install GSC dependencies
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y docker.io python3 python3-pip

    - name: Clone and set up GSC
      run: |
        git clone https://github.com/gramineproject/gsc.git
        cd gsc
        python3 -m pip install --no-cache-dir 'docker>=7.1.0' 'jinja2>=3.1.4' 'tomli>=2.0.1' 'tomli-w>=1.0.0' 'pyyaml>=6.0.2'

    - name: Create signing key
      run: |
        echo "${{ secrets.SIGNING_KEY }}" > signing_key.pem
        chmod 600 signing_key.pem

    - name: Build GSC image
      run: |
        cd gsc
        ./gsc build my-proof ../python.manifest.template -c ../config.yaml

    - name: Sign GSC image
      run: |
        cd gsc
        ./gsc sign-image my-proof ../signing_key.pem -c ../config.yaml

    - name: Export GSC image to file
      run: |
        docker save gsc-my-proof:latest | gzip > gsc-my-proof-latest.tar.gz

    - name: Create Release and Upload Asset
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.sha }}
        name: Release ${{ github.sha }}
        draft: false
        prerelease: false
        files: ./gsc-my-proof-latest.tar.gz

    - name: Cleanup signing key
      if: always()
      run: |
        rm -f signing_key.pem

    - name: Log build result
      if: always()
      run: |
        if [ ${{ job.status }} == "success" ]; then
          echo "Build and release completed successfully"
        else
          echo "Build and release failed"
        fi